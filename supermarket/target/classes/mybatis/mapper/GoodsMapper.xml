<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.Ambition.mapper.GoodsMapper">

    <select id="getAllGoods" resultType="com.Ambition.pojo.Goods">
        select *
        from supermarket.goods
        left join supermarket.goods_type
        on goods.typeId = goods_type.id
        where goods.state=0
    </select>

    <insert id="addGoods" parameterType="com.Ambition.pojo.Goods">
        insert into supermarket.goods
        (goodsName, goodsDesc,productTime, shelfLife, typeId,expirationTime, state, price)
        values (#{goodsName}, #{goodsDesc},#{productTime}, #{shelfLife}, #{typeId},#{expirationTime}, #{state},#{price})
    </insert>

    <select id="getGoodsBy" resultType="com.Ambition.pojo.Goods">
        select * from supermarket.goods
        <where>
            <if test="goodsName != null">
                AND goodsName = #{goodsName}
            </if>
            <if test="productTime != null">
                AND productTime = #{productTime}
            </if>

        </where>
    </select>

    <select id="getGoodsById" resultType="com.Ambition.pojo.Goods">
        select * from supermarket.goods
       where id = #{id};
    </select>

    <delete id="deleteGoods">
        delete from supermarket.goods where id = #{id}
    </delete>

    <update id="updateGoods" parameterType="com.Ambition.pojo.Goods">
        update supermarket.goods
        <trim prefix="set" suffixOverrides=",">
            <if test="goodsName!=null"> goodsName=#{goodsName},</if>
            <if test="typeId!=null"> typeId=#{typeId},</if>
            <if test="goodsDesc!=null"> goodsDesc=#{goodsDesc},</if>
            <if test="shelfLife!=null"> shelfLife=#{shelfLife},</if>
        </trim>
        where id =#{id}
    </update>
    
    <select id="expiration" resultType="com.Ambition.pojo.Expiration">
        select id AS goods_id,goodsName AS goods_name, shelfLife-datediff(sysdate(),productTime) AS remain
        from supermarket.goods
        order by (remain)
    </select>

    <update id="discount">
        update supermarket.goods set state = 1,price = 0.5*price
        where state = 0 AND  shelfLife-datediff(sysdate(),productTime) &lt; 3 AND (typeId = 1 or typeId = 5)
    </update>

    <update id="overdue">
        update supermarket.goods set state=1
        where shelfLife-datediff(sysdate(),productTime) &lt; 0
    </update>

    <select id="CountGoods" resultType="Integer">
        select COUNT(*) from supermarket.goods
    </select>

</mapper>